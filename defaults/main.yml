---
# vim: set softtabstop=2 tabstop=2 shiftwidth=2 expandtab autoindent smartindent syntax=yaml:
# File: main.yml - Main default variables for nomad

# assert supported os/versions
os_supported_matrix:
  Archlinux:
    min_version: ''
  # RHEL-based
  RedHat:
    min_version: '6'
  CentOS:
    min_version: '6'
  Fedora:
    min_version: ''
  Amazon:
    min_version: ''
  # Debian based
  Debian:
    min_version: '8.2'
  Ubuntu:
    min_version: '13.04'

## Core
nomad_debug: false

### Package
nomad_version: "{{ lookup('env','NOMAD_VERSION') | default('0.12.1', true) }}"
nomad_architecture_map:
  amd64: amd64
  x86_64: amd64
  armv7l: arm
  aarch64: arm64
  32-bit: "386"
  64-bit: amd64
nomad_architecture: "{{ nomad_architecture_map[ansible_architecture] }}"
nomad_pkg: "nomad_{{ nomad_version }}_linux_{{nomad_architecture}}.zip"
nomad_zip_url: "https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version }}_linux_{{nomad_architecture}}.zip"
nomad_checksum_file_url: "https://releases.hashicorp.com/nomad/{{ nomad_version }}/nomad_{{ nomad_version}}_SHA256SUMS"
nomad_podman_enable: false
nomad_podman_version: "{{ lookup('env','NOMAD_PODMAN_VERSION') | default('0.1.0', true) }}"
nomad_podman_pkg: "nomad-driver-podman_{{ nomad_podman_version }}_linux_{{nomad_architecture}}.zip"
nomad_podman_url: "https://releases.hashicorp.com/nomad-driver-podman/{{ nomad_podman_version }}"
nomad_podman_zip_url: "{{ nomad_podman_url }}/{{ nomad_podman_pkg }}"
nomad_podman_checksum_file_url: "{{ nomad_podman_url }}/nomad-driver-podman_{{ nomad_podman_version }}_SHA256SUMS"

### Paths
nomad_bin_dir: "/usr/local/bin"
nomad_config_dir: "/etc/nomad.d"
nomad_lockfile: "/var/lock/subsys/nomad"
nomad_run_dir: "/var/run/nomad"

### System user and group
nomad_manage_user: true
nomad_user: "root"
nomad_manage_group: false
nomad_group: "bin"

## Globals
nomad_iface: "{{ lookup('env','NOMAD_IFACE') | default(ansible_default_ipv4.interface, true) }}"
nomad_node_name: "{{ inventory_hostname_short }}"
nomad_node_role: "{{ lookup('env','NOMAD_NODE_ROLE') | default('client', true) }}"
nomad_leave_on_terminate: true
nomad_leave_on_interrupt: false
nomad_disable_update_check: false

#### Server settings
nomad_retry_max: 0
nomad_retry_join: false
nomad_retry_interval: "30s"
nomad_rejoin_after_leave: false
nomad_enabled_schedulers:
  - service
  - batch
  - system
nomad_num_schedulers: "{{ ansible_processor_vcpus }}"
nomad_node_gc_threshold: "24h"
nomad_job_gc_threshold: "4h"
nomad_eval_gc_threshold: "1h"
nomad_deployment_gc_threshold: "1h"
nomad_encrypt: ""
nomad_raft_protocol: 2

#### Client settings
nomad_node_class: ""
nomad_no_host_uuid: false
nomad_max_kill_timeout: "30s"
nomad_network_speed: 0
nomad_cpu_total_compute: 0
nomad_gc_interval: "1m"
nomad_gc_disk_usage_threshold: 80
nomad_gc_inode_usage_threshold: 70
nomad_gc_parallel_destroys: 2
nomad_reserved:
  cpu: "{{ nomad_reserved_cpu | default('0', true) }}"
  memory: "{{ nomad_reserved_memory | default('0', true) }}"
  disk: "{{ nomad_reserved_disk | default('0', true) }}"
  ports: "{{ nomad_reserved_ports | default('22', true) }}"
nomad_host_volumes: []
nomad_options: {}
nomad_meta: {}
nomad_bootstrap_expect: "{{ nomad_servers | count or 3 }}"
nomad_chroot_env: false
nomad_plugins: {}

### Addresses
nomad_bind_address: "{{ hostvars[inventory_hostname]['ansible_'+ nomad_iface ]['ipv4']['address'] }}"
nomad_advertise_address: "{{ hostvars[inventory_hostname]['ansible_' + nomad_iface]['ipv4']['address'] }}"
nomad_use_consul: false
nomad_group_name: "nomad_instances"
nomad_gather_server_facts: false
nomad_node_role: "{{ lookup('env','NOMAD_NODE_ROLE') | default('client', true) }}"
nomad_servers: "\
  {% if nomad_use_consul == false %}\
    {% set _nomad_servers = [] %}\
    {% for host in groups[nomad_group_name] %}\
      {% set _nomad_node_role = hostvars[host]['nomad_node_role'] | default('client', true) %}\
      {% if ( _nomad_node_role == 'server' or _nomad_node_role == 'both') %}\
        {% if _nomad_servers.append(host) %}{% endif %}\
      {% endif %}\
    {% endfor %}\
    {{ _nomad_servers }}\
    {% else %}\
    []\
  {% endif %}"

### Docker
nomad_docker_enable: "{{ lookup('env','NOMAD_DOCKER_ENABLE') | default('false', true) }}"
nomad_docker_dmsetup: true

nomad_config_defaults:
  ### Nomad settings
  name: "{{ inventory_hostname_short }}"
  datacenter: "dc1"
  region: "global"
  bind_addr: "{{ hostvars[inventory_hostname]['ansible_'+ nomad_iface ]['ipv4']['address'] }}"
  data_dir: "/var/nomad"
  log_level: "INFO"
  enable_syslog: true
  leave_on_terminate: true
  leave_on_interrupt: false
  disable_update_check: false

  advertise:
    http: "{{ nomad_advertise_address }}:{{ nomad_ports_http | default('4646', true) }}"
    rpc: "{{ nomad_advertise_address }}:{{ nomad_ports_rpc | default('4647', true) }}"
    serf: "{{ nomad_advertise_address }}:{{ nomad_ports_serf | default('4648', true) }}"

  #### Server settings
  server:
    enabled: "{{ _nomad_node_server | bool }}"
    server_join:
      retry_max: 0
      retry_join: "{{ nomad_servers }}"
      retry_interval: "30s"

    bootstrap_expect: "{{ nomad_servers | count or 3 }}"
    rejoin_after_leave: false
    enabled_schedulers:
      - service
      - batch
      - system
    num_schedulers: "{{ ansible_processor_vcpus }}"
    node_gc_threshold: "24h"
    job_gc_threshold: "4h"
    eval_gc_threshold: "1h"
    encrypt: ""

  #### Client settings
  client:
    enabled: "{{ _nomad_node_client | bool }}"
    node_class: ""
    no_host_uuid: false
    max_kill_timeout: "30s"
    network_speed: 0
    cpu_total_compute: 0
    gc_interval: "1m"
    gc_disk_usage_threshold: 80
    gc_inode_usage_threshold: 70
    gc_parallel_destroys: 2
    reserved:
      cpu: "{{ nomad_reserved_cpu | default('0', true) }}"
      memory: "{{ nomad_reserved_memory | default('0', true) }}"
      disk: "{{ nomad_reserved_disk | default('0', true) }}"
      reserved_ports: "{{ nomad_reserved_ports | default('22', true) }}"

  ### Ports
  ports:
    http: "{{ nomad_ports_http | default('4646', true) }}"
    rpc: "{{ nomad_ports_rpc | default('4647', true) }}"
    serf: "{{ nomad_ports_serf | default('4648', true) }}"

  #### Consul
  consul:
    address: "localhost:8500"
    token: ""
    server_service_name: "nomad-servers"
    client_service_name: "nomad-clients"
    tags: {}

    # Enables automatically registering the services.
    auto_advertise: true

    # Enabling the server and client to bootstrap using Consul.
    server_auto_join: true
    client_auto_join: true

  ### ACLs
  acl:
    enabled: "{{ lookup('env', 'NOMAD_ACL_ENABLED') | default(false, true) }}"
    token_ttl: "30s"
    policy_ttl: "30s"
    replication_token: ""

  ### Vault
  vault:
    enabled: "{{ lookup('env', 'NOMAD_VAULT_ENABLED') | default(false, true) }}"
    address: "{{ vault_address | default('0.0.0.0', true) }}"
    allow_unauthenticated: true
    create_from_role: ""
    task_token_ttl: ""
    ca_file: ""
    ca_path: ""
    cert_file: ""
    key_file: ""
    tls_server_name: ""
    tls_skip_verify: false
    token: ""

  ### TLS
  tls:
    ca_file: ""
    cert_file: ""
    key_file: ""
    verify_server_hostname: true
    verify_https_client: true
    rpc_upgrade_mode: false
