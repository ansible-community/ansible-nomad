---
# File: main.yml - Main tasks for Nomad

- name: Include checks/asserts
  ansible.builtin.include_tasks:
    file: asserts.yml

- name: Include OS variables
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

# Gathers facts (bind address) from servers not currently targeted.
# 'delegate_facts' is currently rather buggy in Ansible so this might not
# always work. Hence 'nomad_gather_server_facts' defaults to 'no'.
- name: Gather facts from other servers # noqa ignore-errors
  ansible.builtin.setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ nomad_servers | difference(play_hosts) }}"
  ignore_errors: true
  when: nomad_gather_server_facts | bool

- name: Expose bind_address, advertise_address and node_role as facts
  ansible.builtin.set_fact:
    nomad_bind_address: "{{ nomad_bind_address }}"
    nomad_advertise_address: "{{ nomad_advertise_address }}"
    nomad_node_role: "{{ nomad_node_role }}"

- name: Include user and group settings
  ansible.builtin.include_tasks:
    file: user_group.yml

- name: Include Docker tasks
  ansible.builtin.include_tasks:
    file: docker.yml
  when: nomad_docker_enable | bool

- name: Install OS packages
  ansible.builtin.include_tasks:
    file: install.yml

- name: Disable SELinux (RHEL)
  ansible.builtin.include_tasks:
    file: selinux.yml
  when: ansible_os_family == "RedHat"

- name: Create directories
  ansible.builtin.file:
    dest: "{{ item }}"
    state: directory
    owner: "{{ nomad_user }}"
    group: "{{ nomad_group }}"
    mode: "0755"
  with_items:
    - "{{ nomad_data_dir }}"
    - "{{ nomad_plugin_dir }}"

- name: Install Podman plugin
  ansible.builtin.include_tasks:
    file: install_podman.yml
  when: nomad_podman_enable | bool

- name: Install CNI plugin
  ansible.builtin.include_tasks:
    file: cni.yml
  when: nomad_cni_enable | bool

- name: Create config directory
  ansible.builtin.file:
    dest: "{{ nomad_config_dir }}"
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Base configuration
  ansible.builtin.template:
    src: base.hcl.j2
    dest: "{{ nomad_config_dir }}/base.hcl"
    owner: root
    group: root
    mode: "0644"
  notify:
    - restart nomad

- name: Get Gossip Key
  ansible.builtin.include_tasks:
    file: get_gossip_key.yml
  when:
    - _nomad_node_server | bool
    - nomad_encrypt_enable | bool
    - nomad_encrypt is not defined

- name: Create TLS configuration
  ansible.builtin.include_tasks:
    file: tls.yml
  when: nomad_tls_enable | bool

- name: Server configuration
  ansible.builtin.template:
    src: server.hcl.j2
    dest: "{{ nomad_config_dir }}/server.hcl"
    owner: root
    group: root
    mode: "0644"
  when:
    - _nomad_node_server | bool
  notify:
    - restart nomad

- name: Remove Server configuration
  ansible.builtin.file:
    dest: "{{ nomad_config_dir }}/server.hcl"
    state: absent
  when:
    - nomad_allow_purge_config | bool
    - not _nomad_node_server | bool
  notify:
    - restart nomad

- name: Client configuration
  ansible.builtin.template:
    src: client.hcl.j2
    dest: "{{ nomad_config_dir }}/client.hcl"
    owner: root
    group: root
    mode: "0644"
  when:
    - _nomad_node_client | bool
  notify:
    - restart nomad

- name: Remove Client configuration
  ansible.builtin.file:
    dest: "{{ nomad_config_dir }}/client.hcl"
    state: absent
  when:
    - nomad_allow_purge_config | bool
    - not _nomad_node_client | bool
  notify:
    - restart nomad

- name: Custom configuration
  ansible.builtin.template:
    src: custom.json.j2
    dest: "{{ nomad_config_dir }}/custom.json"
    owner: root
    group: root
    mode: "0644"
  when:
    - nomad_config_custom is defined
  notify:
    - restart nomad

- name: Remove custome configuration
  ansible.builtin.file:
    dest: "{{ nomad_config_dir }}/custom.json"
    state: absent
  when:
    - nomad_allow_purge_config | bool
    - nomad_config_custom is not defined
  notify:
    - restart nomad

- name: Host volume
  ansible.builtin.include_tasks:
    file: host_volume.yml

- name: SYSV init script
  ansible.builtin.template:
    src: nomad_sysvinit.j2
    dest: /etc/init.d/nomad
    owner: root
    group: root
    mode: "0755"
  when: not ansible_service_mgr == "systemd" and not ansible_os_family == "Debian"

- name: Debian init script
  ansible.builtin.template:
    src: nomad_debian.init.j2
    dest: /etc/init.d/nomad
    owner: root
    group: root
    mode: "0755"
  when: not ansible_service_mgr == "systemd" and ansible_os_family == "Debian"

- name: extract systemd version
  ansible.builtin.shell:
    cmd: set -o pipefail systemctl --version systemd | head -n 1 | cut -d  -f2
  args:
    executable: /bin/bash
  changed_when: false
  check_mode: false
  register: systemd_version
  when:
    - ansible_service_mgr == "systemd"
    - not ansible_os_family == "FreeBSD"
    - not ansible_os_family == "Solaris"
  tags: skip_ansible_lint

- name: Create systemd unit
  ansible.builtin.template:
    src: "{{ nomad_systemd_template }}"
    dest: "{{ nomad_systemd_unit_path }}/nomad.service"
    owner: root
    group: root
    mode: "0644"
  notify:
    - Reload systemd daemon
    - Enable nomad at startup (systemd)
  when: ansible_service_mgr == "systemd"

- name: Start Nomad
  ansible.builtin.service:
    name: nomad
    enabled: true
    state: started
  when: not ansible_service_mgr == "systemd"
